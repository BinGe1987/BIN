package com.kwaijian.facility.OldSource.http;

import android.os.Environment;
import android.os.Handler;
import android.text.TextUtils;
import android.widget.ImageView;

import com.kwaijian.facility.OldSource.tools.BitmapManager;
import com.kwaijian.facility.OldSource.tools.LogUtils;
import com.kwaijian.facility.OldSource.tools.Saver;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HTTP;
import org.apache.http.protocol.HttpContext;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class HttpRequest implements Runnable {

	private RequestCallback mCallback;
	private String mInterface;
	private JSONObject mJson;
	private static CookieStore mCookies;

	public HttpRequest(RequestCallback cb) {
		mCallback = cb;
	}

	public void postRequest(String interfaceType) {
		postRequest(interfaceType, new JSONObject());
	}

	public void postRequest(String interfaceType, JSONObject json) {
		mInterface = interfaceType;
		mJson = json;
		run();
	}

	public void postRequestOnChildThread(String interfaceType) {
		postRequestOnChildThread(interfaceType, new JSONObject());
	}

	public void postRequestOnChildThread(String interfaceType, JSONObject json) {
		mInterface = interfaceType;
		mJson = json;
		new Thread(this).start();
	}

	@Override
	public void run() {
		String data = null;
		data = post(mInterface, mJson);
		if (mCallback != null) {
			mCallback.callback(data);
		}
	}

	public static String post(String interfaceType, JSONObject json) {
		String data = null;
		String cookies;
		DefaultHttpClient client = new DefaultHttpClient();
		client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);
		client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 5000);
		StringBuilder builder = new StringBuilder();
		
		HttpPost post = new HttpPost(HttpConst.Request.URL);
		
		cookies = Saver.getIntance().getString("cookies", "");
		setRequestCookies(cookies,client);
	
		List<NameValuePair> params = new ArrayList<NameValuePair>();

		params.add(new BasicNameValuePair(HttpConst.Request.REQUEST_INTERFACE, interfaceType));
		if (json != null) {
			params.add(new BasicNameValuePair(HttpConst.Request.REQUEST_PARAM, json.toString()));
		} else {
			params.add(new BasicNameValuePair(HttpConst.Request.REQUEST_PARAM, new JSONObject().toString()));
		}
		// HttpGet get = new HttpGet(url_params);
		try {
			post.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));

			HttpResponse response = client.execute(post);
			HttpEntity entity = response.getEntity();
			if (cookies.equals("")) {
				 getCookie(client);
			}
			
		
			BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));
			for (String s = reader.readLine(); s != null; s = reader.readLine()) {
				builder.append(s);
			}
			data = JSONTokener(builder.toString());
		} catch (Exception e) {
			LogUtils.d(e);
		}
		return data;
	}


	public static String jsonToParams(JSONObject json) {
		String params = json.toString();
		params = params.replace("}", "");
		params = params.replace("{", "");
		params = params.replace("\"", "");
		params = params.replace(":", "=");
		String[] strings = params.split(",");
		params = "";
		for (int i = 0; i < strings.length; i++) {
			params += strings[i] + "&";
		}
		return params.substring(0, params.length() - 1);
	}

	private static String JSONTokener(String in) {
		// consume an optional byte order mark (BOM) if it exists
		if (in != null && in.startsWith("\ufeff")) {
			in = in.substring(1);
		}
		return in;
	}

	private static void getCookie(HttpClient httpClient) {
		List<Cookie> cookies = ((AbstractHttpClient) httpClient).getCookieStore().getCookies();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < cookies.size(); i++) {
			Cookie cookie = cookies.get(i);
			String cookieName = cookie.getName();
			String cookieValue = cookie.getValue();
			String cookiedomain = cookie.getDomain();
			if (!TextUtils.isEmpty(cookieName) && !TextUtils.isEmpty(cookieValue) && !TextUtils.isEmpty(cookiedomain)) {
				sb.append(cookieName + ",");
				sb.append(cookieValue+",");
				sb.append(cookiedomain);
			}
		}
		Saver.saveCookies(sb.toString());
	}

	private static void setRequestCookies(String cookie, DefaultHttpClient client) {

		String[] cookies = cookie.split(",");
		if (!TextUtils.isEmpty(cookie)) {

			BasicClientCookie c = new BasicClientCookie(cookies[0],
			cookies[1]);
			c.setVersion(0);
			c.setPath("/");
			c.setDomain(cookies[2]);
			client.getCookieStore().addCookie(c);

		}
	}
	
	public void uploadImage(String interfaceType, String path) {
		String cookies;
		String data=null;
		StringBuilder builder = new StringBuilder();
		DefaultHttpClient client = new DefaultHttpClient();
		client.getParams().setParameter(
				CoreConnectionPNames.CONNECTION_TIMEOUT, 10000);
		client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 10000);
		cookies = Saver.getIntance().getString("cookies", "");
		setRequestCookies(cookies,client);
//		if (mCookies != null) {
//			client.setCookieStore(mCookies);
//		}
		HttpContext httpContext = new BasicHttpContext();
		HttpPost httpPost = new HttpPost(HttpConst.Request.URL);
		try {
			MultipartEntityBuilder entityBuilder = MultipartEntityBuilder.create(); 
			entityBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
			entityBuilder.addPart("image", new FileBody(new File(path)));
			entityBuilder.addTextBody(HttpConst.Request.REQUEST_INTERFACE, interfaceType);
			HttpEntity entity = entityBuilder.build();// 生成 HTTP POST 实体
			httpPost.setEntity(entity);
			HttpResponse response = client.execute(httpPost, httpContext);
			BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			for (String s = reader.readLine(); s != null; s = reader.readLine()) {
				builder.append(s);
			}
			data = JSONTokener(builder.toString());
			LogUtils.d("-------->"+data);
            try {
                JSONObject json = new JSONObject(data);
                json.put("local_path", path);
                data = json.toString();
            } catch (Exception e) {
            }
			mCallback.callback(data);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void downloadImage(String imageId, File file){
		int cache = 10 * 1024;
		HttpClient client = new DefaultHttpClient();
		HttpGet httpget = new HttpGet(HttpConst.Request.IMAGE_PATH + imageId);  
        try {
			HttpResponse response = client.execute(httpget);
			HttpEntity entity = response.getEntity();  
            InputStream is = entity.getContent();
            
            FileOutputStream fileout = new FileOutputStream(file);  
            
            byte[] buffer=new byte[cache];  
            int ch = 0;  
            while ((ch = is.read(buffer)) != -1) {  
                fileout.write(buffer,0,ch);  
            }  
            is.close();  
            fileout.flush();  
            fileout.close();  
            mCallback.callback(new String("{\"errCode\":0,\"errMsg\":\"downloadImage:ok\",\"imageId\":\""+imageId+"\"}"));
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}  
	}

	public static boolean downloadImage(String url, String path) {
        if (new File(path).exists()) {
            return true;
        }
		int cache = 10 * 1024;
		HttpClient client = new DefaultHttpClient();
		HttpGet httpget = new HttpGet(url);
		try {
			HttpResponse response = client.execute(httpget);
			HttpEntity entity = response.getEntity();
			InputStream is = entity.getContent();

			FileOutputStream fileout = new FileOutputStream(path);

			byte[] buffer=new byte[cache];
			int ch = 0;
			while ((ch = is.read(buffer)) != -1) {
				fileout.write(buffer,0,ch);
			}
			is.close();
			fileout.flush();
			fileout.close();
			return true;
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}

	public void downloadImage(Handler handler, final String imageId, File file, final ImageView iv){
		int cache = 10 * 1024;
		HttpClient client = new DefaultHttpClient();
		HttpGet httpget = new HttpGet(HttpConst.Request.IMAGE_PATH + imageId);  
        try {
			HttpResponse response = client.execute(httpget);
			HttpEntity entity = response.getEntity();  
            InputStream is = entity.getContent();
            
            FileOutputStream fileout = new FileOutputStream(file);  
            
            byte[] buffer=new byte[cache];  
            int ch = 0;  
            while ((ch = is.read(buffer)) != -1) {  
                fileout.write(buffer,0,ch);  
            }  
            is.close();  
            fileout.flush();  
            fileout.close();  
            mCallback.callback(new String("{\"errCode\":0,\"errMsg\":\"downloadImage:ok\",\"imageId\":\""+imageId+"\"}"));
            handler.post(new Runnable() {
				public void run() {
					File image = new File(Environment.getExternalStorageDirectory(), "Facility/image/"+imageId+".png");
					if (iv.getTag()!=null && iv.getTag().equals(imageId)) {
						iv.setImageBitmap(BitmapManager.compressImage(image.toString()));
					}
				}
			});
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
}
